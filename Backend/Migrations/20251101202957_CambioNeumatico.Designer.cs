// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251101202957_CambioNeumatico")]
    partial class CambioNeumatico
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Auditoria", b =>
                {
                    b.Property<int>("IdAuditoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAuditoria"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdEntidad")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdAuditoria");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("Backend.Models.ChecklistDiario", b =>
                {
                    b.Property<int>("IdChecklistDiario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdChecklistDiario"));

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FaroDelanteroDerecho")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FaroDelanteroIzquierdo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FaroTraseroDerecho")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FaroTraseroIzquierdo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<bool>("LiquidoFrenos")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MatafuegoVigente")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NivelAceite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NivelAguaParabrisas")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NivelFrenos")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NivelRefrigerante")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("PresionNeumaticos")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdChecklistDiario");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("ChecklistsDiarios");
                });

            modelBuilder.Entity("Backend.Models.Documento", b =>
                {
                    b.Property<int>("IdDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDocumento"));

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("FechaEmision")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("UrlArchivos")
                        .HasColumnType("longtext");

                    b.HasKey("IdDocumento");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Backend.Models.Matafuego", b =>
                {
                    b.Property<int>("IdMatafuego")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMatafuego"));

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly>("FechaCarga")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaVencimiento")
                        .HasColumnType("date");

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdMatafuego");

                    b.ToTable("Matafuegos");
                });

            modelBuilder.Entity("Backend.Models.MensajeChat", b =>
                {
                    b.Property<int>("IdMensajeChat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMensajeChat"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdMensajeChat");

                    b.HasIndex("IdUsuario");

                    b.ToTable("MensajesChats");
                });

            modelBuilder.Entity("Backend.Models.Neumatico", b =>
                {
                    b.Property<int>("IdNeumatico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdNeumatico"));

                    b.Property<bool>("DesgasteIrregular")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Estandar")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly>("FechaColocacion")
                        .HasColumnType("date");

                    b.Property<int>("IdPosicionNeumatico")
                        .HasColumnType("int");

                    b.Property<int?>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<int>("KmColocacion")
                        .HasColumnType("int");

                    b.Property<int>("KmRodados")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Medida")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdNeumatico");

                    b.HasIndex("IdPosicionNeumatico");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("Neumaticos");
                });

            modelBuilder.Entity("Backend.Models.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPersona"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly>("FechaNac")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPersona");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Backend.Models.RegistroKilometraje", b =>
                {
                    b.Property<int>("IdRegistroKilometraje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRegistroKilometraje"));

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<int>("Kilometraje")
                        .HasColumnType("int");

                    b.HasKey("IdRegistroKilometraje");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("RegistrosKilometraje");
                });

            modelBuilder.Entity("Backend.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdRol");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Backend.Models.Service", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdService"));

                    b.Property<bool>("AlineoBalanceo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CorreaDentada")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CorreaPolyV")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<bool>("FiltroDeAceite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FiltroDeAire")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FiltroDeCombustible")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<int>("KmActual")
                        .HasColumnType("int");

                    b.Property<int>("KmProx")
                        .HasColumnType("int");

                    b.Property<int>("KmProxBombaDeAgua")
                        .HasColumnType("int");

                    b.Property<int>("KmProxPolyV")
                        .HasColumnType("int");

                    b.HasKey("IdService");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Backend.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario");

                    b.HasIndex("Gmail")
                        .IsUnique();

                    b.HasIndex("IdPersona")
                        .IsUnique();

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Backend.Models.Vehiculo", b =>
                {
                    b.Property<int>("IdVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdVehiculo"));

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<int>("CantidadAuxilios")
                        .HasColumnType("int");

                    b.Property<int>("CantidadNeumaticos")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IdMatafuego")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumeroChasis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumeroMotor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdVehiculo");

                    b.HasIndex("IdMatafuego")
                        .IsUnique();

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("PosicionNeumatico", b =>
                {
                    b.Property<int>("IdPosicionNeumatico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPosicionNeumatico"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdPosicionNeumatico");

                    b.ToTable("PosicionesNeumaticos");
                });

            modelBuilder.Entity("Backend.Models.Auditoria", b =>
                {
                    b.HasOne("Backend.Models.Usuario", "Usuario")
                        .WithOne("Auditoria")
                        .HasForeignKey("Backend.Models.Auditoria", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Backend.Models.ChecklistDiario", b =>
                {
                    b.HasOne("Backend.Models.Vehiculo", "Vehiculo")
                        .WithMany("ChecklistsDiarios")
                        .HasForeignKey("IdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Backend.Models.Documento", b =>
                {
                    b.HasOne("Backend.Models.Vehiculo", "Vehiculo")
                        .WithMany("Documentos")
                        .HasForeignKey("IdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Backend.Models.MensajeChat", b =>
                {
                    b.HasOne("Backend.Models.Usuario", "Usuario")
                        .WithMany("MensajeChat")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Backend.Models.Neumatico", b =>
                {
                    b.HasOne("PosicionNeumatico", "Posicion")
                        .WithMany("Neumaticos")
                        .HasForeignKey("IdPosicionNeumatico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("IdVehiculo");

                    b.Navigation("Posicion");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Backend.Models.RegistroKilometraje", b =>
                {
                    b.HasOne("Backend.Models.Vehiculo", "Vehiculo")
                        .WithMany("RegistrosKilometraje")
                        .HasForeignKey("IdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Backend.Models.Service", b =>
                {
                    b.HasOne("Backend.Models.Vehiculo", "Vehiculo")
                        .WithMany("Services")
                        .HasForeignKey("IdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Backend.Models.Usuario", b =>
                {
                    b.HasOne("Backend.Models.Persona", "Persona")
                        .WithOne("Usuario")
                        .HasForeignKey("Backend.Models.Usuario", "IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Backend.Models.Vehiculo", b =>
                {
                    b.HasOne("Backend.Models.Matafuego", "Matafuego")
                        .WithOne("Vehiculo")
                        .HasForeignKey("Backend.Models.Vehiculo", "IdMatafuego");

                    b.Navigation("Matafuego");
                });

            modelBuilder.Entity("Backend.Models.Matafuego", b =>
                {
                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Backend.Models.Persona", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Backend.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Backend.Models.Usuario", b =>
                {
                    b.Navigation("Auditoria");

                    b.Navigation("MensajeChat");
                });

            modelBuilder.Entity("Backend.Models.Vehiculo", b =>
                {
                    b.Navigation("ChecklistsDiarios");

                    b.Navigation("Documentos");

                    b.Navigation("RegistrosKilometraje");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("PosicionNeumatico", b =>
                {
                    b.Navigation("Neumaticos");
                });
#pragma warning restore 612, 618
        }
    }
}
